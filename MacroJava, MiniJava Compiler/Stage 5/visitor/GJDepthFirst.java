//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //
   
   void procBegin(int maxStk){
      System.out.println("\tsw $ra 0($sp)");
      System.out.println("\tsw $fp -4($sp)");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsubu $sp $sp " + (4 * (maxStk + 3)));
   }
   void procEnd(int maxStk){
      System.out.println("\taddu $sp $sp " + (4 * (maxStk + 3)));
      System.out.println("\tlw $ra 0($fp)");
      System.out.println("\tlw $fp -4($fp)");
   }
   
   /** DONE
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println(".text\n.globl\tmain\nmain:");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int maxStk = (Integer) Integer.valueOf((String) n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.println("\tsubu $sp $sp 8");  // Creating a dummy
      procBegin(maxStk);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.println("\taddu $sp $sp 8");
      procEnd(maxStk);
      System.out.println("jal _exitret");
      
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      
      System.out.println(" 	 .text \n"+
      " 	 .globl _halloc \n"+
      " _halloc: \n"+
      " 	 li $v0, 9 \n"+
      " 	 syscall \n"+
      " 	 jr $ra \n"+
      " \n"+
      "\n"+
      " 	 .text \n"+
      " 	 .globl _error \n"+
      " _error: \n"+
      " 	 li $v0, 4\n"+
      " 	 syscall\n"+
      " 	 li $v0, 10\n"+
      " 	 syscall\n"+
      " \n"+
      "\n"+
      " 	 .text \n"+
      " 	 .globl _print \n"+
      " _print: \n"+
      " 	 li $v0, 1 \n"+
      " 	 syscall \n"+
      " 	 la $a0, newline \n"+
      " 	 li $v0, 4 \n"+
      " 	 syscall \n"+
      " 	 jr $ra \n"+
      " \n"+
      "\n"+
      " 	 .text \n"+
      " 	 .globl _exitret \n"+
      " _exitret: \n"+
      " 	 li $v0, 10\n"+
      " 	 syscall \n"+
      " 	 .data\n"+
      " 	 .align 0\n"+
      " newline: 	.asciiz \"\\n\"\n"+
      "\n"+
      " 	 .data\n"+
      " 	 .align 0\n"+
      " error_msg:	.asciiz \" ERROR : Abnormally terminated!\\n \"");
      return _ret;
   }

   boolean label = false;
   /** DONE
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      label = true;
      n.f0.accept(this, argu);
      label = false;
      return _ret;
   }

   /** DONE
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String procLabel = (String)n.f0.accept(this, argu);
      System.out.println("\n\n.text\n.globl " + procLabel + "\n" + procLabel + ":");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int maxStk = (Integer) Integer.valueOf((String) n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      procBegin(maxStk);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      procEnd(maxStk);
      System.out.println("\tjr $ra");
      n.f12.accept(this, argu);
      return _ret;
   }

   /** DONE
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      label = false;
      n.f0.accept(this, argu);
      label = true;
      return _ret;
   }

   /** DONE
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      System.out.println("\tnop");
      n.f0.accept(this, argu);
      return _ret;
   }

   /** DONE
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      System.out.println("\tjal _error");
      n.f0.accept(this, argu);
      return _ret;
   }

   /** DONE
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String Rsrc = (String) n.f1.accept(this, argu);
      String label = (String) n.f2.accept(this, argu);
      System.out.println("\tbeqz " + Rsrc + " " +  label);
      return _ret;
   }

   /** DONE
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      System.out.println("\tb " + label);
      return _ret;
   }

   /** DONE
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dest = (String) n.f1.accept(this, argu);
      String offset = (String) n.f2.accept(this, argu);
      String src = (String) n.f3.accept(this, argu);
      System.out.println("\tsw " + src + " " + offset + "(" + dest + ")");
      return _ret;
   }

   /** DONE
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dest = (String) n.f1.accept(this, argu);
      String src = (String) n.f2.accept(this, argu);
      String offset = (String)n.f3.accept(this, argu);
      System.out.println("\tlw " + dest + " " + offset + "(" + src + ")");
      return _ret;
   }

   /** DONE
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   String Type = null;
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Type = "MOVE";
      String Reg = (String) n.f1.accept(this, argu);
      n.f2.accept(this, (A) Reg);
      Type = null;
      return _ret;
   }

   /** DONE
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      Type = "PRINT";
      n.f0.accept(this, argu);
      String expr = (String) n.f1.accept(this, argu);
      System.out.println("sw $a0 4($sp)");
      if(simpleExprType == 0) System.out.println("\tmove $a0 " + expr);
      else System.out.println("\tli $a0 " + expr);
      System.out.println("\tjal _print");
      System.out.println("lw $a0 4($sp)");
      Type = null;
      return _ret;
   }

   /** DONE
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String Reg = (String) n.f1.accept(this, argu);
      int sArg = (Integer) Integer.valueOf((String) n.f2.accept(this, argu));
      System.out.println("\tlw " + Reg + " " + (-4 * (sArg + 2)) + "($fp)");
      return _ret;
   }

   /** DONE
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int sArg = (Integer) Integer.valueOf((String) n.f1.accept(this, argu));
      String Reg = (String) n.f2.accept(this, argu);
      System.out.println("\tsw " + Reg + " " + (-4 * (sArg + 2)) + "($fp)");
      return _ret;
   }

   /** DONE
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int argNo = Integer.valueOf((String) n.f1.accept(this, argu));
      String Reg = (String) n.f2.accept(this, argu);
      System.out.println("\tsw " + Reg + " " + (-4 * (argNo - 1 + 2)) + "($sp)");
      return _ret;
   }

   /** DONE
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String dest = (String) n.f1.accept(this, argu);
      if(simpleExprType == 0) System.out.println("\tjalr " + dest); // Reg
      if(simpleExprType == 1) {System.out.println("\tli $v1 " + dest); System.out.println("jalr $v1");} // Int
      if(simpleExprType == 2) System.out.println("\tjal " + dest); // Label
      return _ret;
   }

   /** DONE
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   boolean simpleFromMove = false;
   public R visit(Exp n, A argu) {
      R _ret=null;
      simpleFromMove = true;
      n.f0.accept(this, argu);
      simpleFromMove = false;
      return _ret;
   }

   /** DONE
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String dest = (String) argu;
      simpleFromMove = false;
      n.f0.accept(this, argu);
      String expr = (String) n.f1.accept(this, argu);
      System.out.println("sw $a0 4($sp)");
      if(simpleExprType == 0) System.out.println("\tmove $a0 " + expr);
      else System.out.println("\tli $a0 " + expr);
      System.out.println("\tjal _halloc");
      System.out.println("lw $a0 4($sp)");
      System.out.println("\tmove " + dest + " $v0");
      return _ret;
   }

   /** DONE
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      simpleFromMove = false;
      String dest = (String) argu;
      String op = (String) n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      String s2 = (String) n.f2.accept(this, argu);
      if(op == "LE") System.out.println("\tsle " + dest + " " + s1 + " " + s2);
      if(op == "NE") System.out.println("\tsne " + dest + " " + s1 + " " + s2);
      if(op == "PLUS") System.out.println("\tadd " + dest + " " + s1 + " " + s2);
      if(op == "MINUS") System.out.println("\tsub " + dest + " " + s1 + " " + s2);
      if(op == "TIMES") { System.out.println("\tmult " + s1 + " " + s2); System.out.println("\tmflo " + dest); }
      if(op == "DIV") { System.out.println("\tdiv " + s1 + " " + s2); System.out.println("\tmflo " + dest); }
      return _ret;
   }

   /** DONE
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      return n.f0.accept(this, argu);
   }

   /** DONE
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      n.f0.accept(this, argu);
      return n.f1.accept(this, argu);
   }

   /** DONE
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   int simpleExprType = 0;
   public R visit(SimpleExp n, A argu) {
      String dest = (String) argu;
      String expr = (String) n.f0.accept(this, argu);
      if(simpleFromMove){
         if(simpleExprType == 0) System.out.println("\tmove " + dest + " " + expr);
         else if(simpleExprType == 1) System.out.println("\tli " + dest + " " + expr);
         else System.out.println("\tla " + dest + " " + expr);
      }
      return (R) expr;
   }

   /** DONE
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      simpleExprType = 0;
      return (R)("$" + (String)n.f0.accept(this, argu));
   }

   /** DONE
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      simpleExprType = 1;
      return n.f0.accept(this, argu);
   }

   /** DONE
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      simpleExprType = 2;
      String LABEL = (String) n.f0.accept(this, argu);
      if(label) System.out.println(LABEL + ":");
      return (R) LABEL;
   }

   /** DONE
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /** DONE
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }
   
}
